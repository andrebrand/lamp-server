class LampConfig { doc; colorPickerDisabled = !1; pickedColor = ''; defaultColor = 'red'; activeTab = 'home-tab'; elements = {}; colors = { red: { r: 1, g: 0, b: 0 }, pink: { r: 1, g: 0, b: 1 }, yellow: { r: 1, g: 1, b: 0 }, green: { r: 0, g: 1, b: 0 }, cyan: { r: 0, g: 1, b: 1 }, blue: { r: 0, g: 0, b: 1 }, white: { r: 1, g: 1, b: 1 }, black: { r: 0, g: 0, b: 0 } }; constructor(e) { this.doc = e, this.elements.ssid = this.doc.getElementById('inputSSID'), this.elements.wifipw = this.doc.getElementById('inputPW'), this.elements.wifiValueHelp = this.doc.getElementById('wifiValueHelp'), this.elements.modal = this.doc.getElementById('modal'), this.elements.colorPreview = this.doc.getElementById('colorPreview'), this.elements.backdrop = this.doc.getElementById('backdrop'), this.elements.networkForm = this.doc.getElementById('networkForm'), this.start() } start() { this.addModalListener(), this.setInitalConfig(), this.addEventListenerToList(this.doc.getElementsByClassName('nav-link'), e => { e.preventDefault(), this.toggleTabs(e.target) }), this.addEventListenerToList(this.doc.getElementsByName('gridRadios'), e => { this.toggleRadioButtons('fade' == e.target.value) }), this.addEventListenerToList(this.doc.getElementsByClassName('colorButton'), e => { this.changeColor(e.target.id) }), this.elements.networkForm.onsubmit = e => { e.preventDefault(), this.submitWifi() }, this.addEventListenerToList([this.elements.wifiValueHelp], e => { this.openWifiValueHelp() }) } sendHttpRequest(e, t, s, i, o) { var l = new XMLHttpRequest; l.open(t, e, !0), l.timeout = 5e3, l.setRequestHeader('Content-Type', 'application/json'), l.ontimeout = e => { o() }, l.onload = i, s ? l.send(JSON.stringify(s)) : l.send() } toggleColorPicker() { this.doc.getElementById('color-wrapper').classList.toggle('disabled') } addEventListenerToList(e, t) { for (let s = 0; s < e.length; s++)e[s].onclick = t } clearColorPreview() { this.elements.colorPreview.classList.remove('red', 'pink', 'yellow', 'green', 'cyan', 'blue', 'white', 'black') } changeColor(e) { if (!this.colorPickerDisabled) { let t = this.colors[e]; e !== this.pickedColor && (this.clearColorPreview(), this.sendHttpRequest('change?r=' + t.r + '&g=' + t.g + '&b=' + t.b, 'GET', null, t => { this.elements.colorPreview.classList.add(e), this.pickedColor = e })) } } changeColorMode(e) { this.sendHttpRequest('/fade?fade=' + e, 'GET', null, e => { }) } isValidSSID(e) { return e.length >= 2 && e.length <= 32 } isValidWifiPW(e) { return e.length >= 8 && e.length <= 70 } showModal(e, t, s) { switch (this.doc.getElementById('modalLabel').innerHTML = e, this.doc.getElementById('modalContent').innerHTML = t, this.elements.modal.classList.add('show'), this.elements.backdrop.classList.add('show'), s) { case 'e': this.doc.getElementById('error-icon').classList.add('show'); break; case 'i': this.doc.getElementById('info-icon').classList.add('show') } } hideModal() { this.elements.modal.classList.remove('show'), this.elements.backdrop.classList.remove('show'); let e = this.doc.getElementsByClassName('modal-icon'); for (let t of e) t.classList.remove('show') } addModalListener() { let e = []; e.push(this.elements.modal), e.push(this.doc.getElementById('closeModalX')), e.push(this.doc.getElementById('closeModal')), this.addEventListenerToList(e, () => this.hideModal()), this.doc.getElementById('modal-dialog').onclick = e => { e.stopPropagation() } } toggleRadioButtons(e) { this.colorPickerDisabled == e || (this.toggleColorPicker(), this.colorPickerDisabled = !this.colorPickerDisabled, this.changeColorMode(e ? '1' : '0'), e || this.changeColor(this.defaultColor)) } openWifiValueHelp() { this.sendHttpRequest('scanWifi', 'GET', null, e => { try { let t = JSON.parse(e.target.response); if (t.wifi.length > 0) { let s = '<div class='button-list'>'; for (let i of t.wifi) s += '<button class='btn ml - 2 btn - primary network - buttons' type='button' value=''+i.name+''>' + i.name + '</button>'; s += '</div>', this.showModal('Available WiFi networks', s, 'i'), this.addEventListenerToList(this.doc.getElementsByClassName('network-buttons'), e => { this.preselectSSID(e.target.value), this.hideModal() }) } else this.showModal('Available WiFi networks', 'Can not find any WiFi networks', 'i') } catch (o) { this.showModal('An Error occurred!', 'Can not scan for WiFi networks.', 'e'), console.error(o) } }) } preselectSSID(e) { this.elements.ssid.value = e } submitWifi() { let e = this.elements.ssid.value, t = this.elements.wifipw.value; this.isValidSSID(e) && this.isValidWifiPW(t) && this.sendHttpRequest('/settingsPost', 'POST', e + ',.,' + t, e => { 200 != e.target.status ? this.showModal('An Error occurred!', 'WiFi credentials are not correct.', 'e') : (this.elements.networkForm.reset(), this.showModal('WiFi connected!', 'WiFi connection successfully established. <br> Please connect your device to the same WiFi in order to continue.', 'i'), this.doc.getElementById('settingsTabNavItem').style.display = 'none', this.toggleTabs(this.doc.getElementById('home-tab'))) }, () => { this.showModal('Error occurred!', 'WiFi credentials are not correct.', 'e') }) } setInitalConfig() { this.sendHttpRequest('getMode', 'GET', null, e => { let t = { doFade: !1, isAccessPoint: !0 }; try { let s = JSON.parse(e.target.response); t.doFade = !!s.doFade, t.isAccessPoint = !s.wifiMode } catch (i) { console.error(i) } t.doFade ? (this.toggleColorPicker(), this.colorPickerDisabled = !0, this.doc.getElementById('gridRadios1').checked = !0) : this.doc.getElementById('gridRadios2').checked = !0, t.isAccessPoint || (this.doc.getElementById('settingsTabNavItem').style.display = 'none') }) } toggleTabs(e) { if (e != this.activeTab) { this.activeTab = e; let t = this.doc.getElementsByClassName('nav-link'), s = this.doc.getElementsByClassName('tab-pane'); for (let i of t) i.classList.remove('active'); for (let o of (e.classList.add('active'), s)) o.id == e.id.replace('-tab', '') ? (o.classList.add('active'), o.classList.add('show')) : (o.classList.remove('active'), o.classList.remove('show')) } } } document.addEventListener('DOMContentLoaded', function () { new LampConfig(document) });